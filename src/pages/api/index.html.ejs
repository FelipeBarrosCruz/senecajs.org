---
layout: api.html
---


<h1>Seneca API</h1>


<div class="row">

<%

var more = {
  options: more_options()
}

var example = {
  options: example_options()
}


/*
Field names:
  n: name,
  d: description,
  t: type or type list
  f: default value
  o: is optional
  p: function parameters, keyed by name
  g: function signature - list of parameter names
  m: full description with more details
  x: code example
  y: code example explanation
*/

var items_top = [{
  n: 'Instance',
  d: 'Creating and using the Seneca instance object.'
}, {
  n: 'Options',
  d: 'The configuration options and how they are defined.'
}, {
  n: 'Methods',
  d: 'The public methods of the Seneca instance.'
}, {
  n: 'Plugins',
  d: 'The plugin interface.'
}, {
  n: 'Messages',
  d: 'The message meta data properties.'
}, {
  n: 'Utilities',
  d: 'Utility functions and formats.'
}]

var items_options = [{
   n: 'tag',
   t: [{t:'String', f:'"-"'}],
   f: "'_'",
   m: more.options.tag,
   x: example.options.tag,
   d: 'Tag the Seneca instance with a short code that will be added to the instance identifier. Useful for tracing and debugging.',

}, {
   n: 'timeout',
   t: [{t:'Integer', f:'22222'}],
   f: '22222',
   m: more.options.tag,
   x: example.options.tag,
   d: 'The global timeout for actions. Once this timeout is exceeded, the sender of the message receives an error response via the callback of the <a href="#method-act">act</a> method.'
}]



var items_methods = [{
   n: 'add',
   g: [['pattern', 'action'], ['pattern', 'sub_pattern', 'action']],
   p: { 
     pattern: {
       t:['jsonic', 'Object'], 
       d:'The pattern that inbound messages must match to trigger this action.'
     },
     sub_pattern: {
       t:['Object'], 
       o:true, 
       d:'A convenience parameter that is merged into the <i>pattern</i> parameter with lower precedence.'
     },
     action: {
       t:['Function'], 
       d:'The function that executes the action for this pattern.'
     } 
   },
   d: '<p>Add an <i>action</i> function to be called when inbound messages match the <i>pattern</i>.</p>'
}, {
   n: 'act',
   g: [['message', 'callback'], ['message', 'sub_message', 'callback']],
   p: { 
     message: {
       t:['jsonic', 'Object'], 
       d:'The pattern that inbound messages must match to trigger this action.'
     },
     sub_message: {
       t:['Object'], 
       o:true, 
       d:'A convenience parameter that is merged into the <i>message</i> parameter with lower precedence.'
     },
     callback: {
       t:['Function'], 
       o:true, 
       d:'The function that executes the action for this pattern.'
     } 
   },
   d: 'Send a <i>message</i> and receive a response via the <i>callback</i>. If there is no <i>callback</i> the message is asynchronous.'
}]

// Omit separator after last item.
function S(I, A, sep) {
   return I === A.length-1 ? '' : sep
}

// Null check arrays and objects with
// optional convenience iterator over elements or keys.
function Q(x,iter) {
  var isobj = 0
  var xa = null == x ? [] : Array.isArray(x) ? x : (isobj=1,Object.keys(x))
  if (iter) xa.forEach(iter)
  return isobj ? x : xa
}

// Conditional print.
function P(bool, x) {
  return !!bool ? x : ''
}
%>


<% items_top.forEach(function (i) { %>
<div class="col-xs-12 col-sm-4"><a href="#<%=i.n.toLowerCase()%>"><div class="api-box">
<h4><%=i.n%></h4>
<p class="top"><%-i.d%></p>
</div></a></div>
<% }) %>

</div>




<div class="cf">
<h2 class="api-subhead">Instance</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>

<div class="row"><br><br><br><br><br><br><br><br></div>



<div class="cf">
<h2 class="api-subhead">Options</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>
<div class="row">
<% items_options.forEach(function (i) { %>
<div class="col-xs-12 col-sm-4"><div class="api-box" data-api-box-ref="option-<%=i.n%>">
<h5><b><%=i.n%></b> <u><%=i.t[0].t%></u> <u><%=i.t[0].f%></u></h5>
<p><%-i.d%></p>
</div></div>
<% }) %>
</div>




<div class="cf">
<h2 class="api-subhead">Methods</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>


<div class="row">

<% items_methods.forEach(function (i) { %>
<div class="col-xs-12 col-sm-4"><a href="#method-<%=i.n%>"><div class="api-box">
<h5>
<b><%=i.n%></b>
<% i.g[0].forEach(function (p0) { %>
<i><%=p0%><%=P(Q(i.p[p0]).o,'?')%></i>
<% }) %>
</h5>
<p><%-i.d%></p>
<ul>
<% i.g[0].forEach(function (pn) { var p = i.p[pn] %>
<li><i><%=pn%></i> :

<% Q(p.t, function (t,I,A) { %>
<u><%=t%></u> <%=S(I,A,'|')%>
<% }) %>

</li>
<% }) %>
<ul>
</div></a></div>
<% }) %>

</div>




<!-- Full option descriptions -->

<% items_options.forEach(function (i) { %>
<div class="cf">
<h2 class="api-subhead">Option: <b><%=i.n%></b></h2>
<a class="api-back" href="#options">up</a>
</div>

<div class="row"><div class="col-xs-12 api-desc">

<h4>Types and defaults</h4>
<ul>
<% i.t.forEach(function (t) { %>
<li><u><%=t.t%></u>, <u><%=t.f%></u></li>
<% }) %>
</ul>

<h4>Description</h4>
<p class="desc"><%-i.d%></p>

<h4>Details</h4>
<%-i.m%>

<h4>Example</h4>
<pre><code class="lang-js hljs javascript"><%-i.x.trim()%></code></pre>
<%-i.y%>

</div></div>
<% }) %>




<!-- Full method descriptions -->

<% items_methods.forEach(function (i) { %>
<div class="cf">
  <h2 class="api-subhead">Method: <b><%=i.n%></b></h2>
<a class="api-back" href="#methods">up</a>
</div>

<div class="row"><div class="col-xs-12 api-desc">

<p><%-i.d%></p>

<h4>Signatures</h4>
<ul>
<% i.g.forEach(function (g) { %>
<li><b><%=i.n%></b> &nbsp;&nbsp;
<% g.forEach(function (pn,I,A) { %>
<i><%=pn%></i><%=S(I,A,',')%> 
<% }) %>
</li>
<% }) %>
</ul>

<h4>Parameters</h4>
<table>
<% Q(i.p, function (pn) { var p = i.p[pn] %>
<tr>
  <td><i><%=pn%></i></td>
  <td>
<% Q(p.t, function(t,I,A) { %>
    <u><%=t%></u><%=S(I,A,'|')%>
<% }) %>
  <small><%=P(Q(i.p[pn]).o,'(optional)')%></small>
  </td>
  <td><%-p.d%></td>
</tr>
<% }) %>

</table>


<h4>Details</h4>
<p class="desc"><%-i.m%></p>

<h4>Example</h4>
<pre><code class="lang-js hljs javascript"><%-i.x%></code></pre>
<%-i.y%>

</div></div>
<% }) %>



<div class="row "><br><br><br><br><br><br><br><br></div>

<div class="cf">
<h2 class="api-subhead">Plugins</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>

<div class="row"><br><br><br><br><br><br><br><br></div>

<div class="cf">
<h2 class="api-subhead">Messages</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>

<div class="row"><br><br><br><br><br><br><br><br></div>



<%
function more_options () {
  return {
   tag: `
<p>
The <b>tag</b> value is a free form String that is appended to the end of the Seneca identifier. It is not meant to be a unique value. You use it identify groups of microservices.
</p>
<p>
The public member variable <code>Seneca.tag</code> can be used to retrieve the tag value.
</p>
   `
   }   
}

function example_options () {
  return {
   tag: `
var seneca = require('seneca')({tag: 'foo'})

// prints .../foo
console.log(seneca.id)
   `
   }   
}
%>
